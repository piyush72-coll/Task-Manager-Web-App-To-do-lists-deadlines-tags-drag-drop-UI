import React, { useEffect, useState } from "react";

// Task Manager — Single-file React component
// Tailwind CSS assumed to be available in the environment

export default function TaskManagerApp() {
  const COLUMNS = [
    { id: "todo", title: "To Do" },
    { id: "inprogress", title: "In Progress" },
    { id: "done", title: "Done" },
  ];

  const [tasks, setTasks] = useState(() => {
    try {
      const raw = localStorage.getItem("tm_tasks_v1");
      return raw ? JSON.parse(raw) : {};
    } catch (e) {
      return {};
    }
  });

  const [editing, setEditing] = useState(null); // {id, column}
  const [filterTag, setFilterTag] = useState("");
  const [query, setQuery] = useState("");

  useEffect(() => {
    localStorage.setItem("tm_tasks_v1", JSON.stringify(tasks));
  }, [tasks]);

  function makeId() {
    return `${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 9)}`;
  }

  function addTask(columnId, data) {
    const id = makeId();
    const newTask = {
      id,
      title: data.title || "Untitled",
      description: data.description || "",
      deadline: data.deadline || null,
      tags: data.tags || [],
      createdAt: new Date().toISOString(),
    };
    setTasks((prev) => ({ ...prev, [id]: { ...newTask, column: columnId } }));
  }

  function updateTask(id, changes) {
    setTasks((prev) => ({ ...prev, [id]: { ...prev[id], ...changes } }));
  }

  function removeTask(id) {
    setTasks((prev) => {
      const copy = { ...prev };
      delete copy[id];
      return copy;
    });
  }

  function onDragStart(e, taskId) {
    e.dataTransfer.setData("text/plain", taskId);
    e.dataTransfer.effectAllowed = "move";
  }

  function onDrop(e, columnId) {
    const id = e.dataTransfer.getData("text/plain");
    if (!id) return;
    updateTask(id, { column: columnId });
  }

  function onDragOver(e) {
    e.preventDefault();
  }

  function openEditor(columnId, taskId = null) {
    setEditing({ column: columnId, id: taskId });
  }

  function closeEditor() {
    setEditing(null);
  }

  function exportJSON() {
    const blob = new Blob([JSON.stringify(tasks, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "tasks.json";
    a.click();
    URL.revokeObjectURL(url);
  }

  function filteredTasks() {
    const arr = Object.values(tasks).filter((t) => {
      if (filterTag && !t.tags.map((x) => x.toLowerCase()).includes(filterTag.toLowerCase())) return false;
      if (query) {
        const q = query.toLowerCase();
        if (!((t.title || "").toLowerCase().includes(q) || (t.description || "").toLowerCase().includes(q))) return false;
      }
      return true;
    });
    return arr;
  }

  function tasksByColumn(columnId) {
    return filteredTasks().filter((t) => t.column === columnId).sort((a, b) => {
      // soonest deadline first (nulls go to bottom), then createdAt
      if (a.deadline && b.deadline) return new Date(a.deadline) - new Date(b.deadline);
      if (a.deadline) return -1;
      if (b.deadline) return 1;
      return new Date(a.createdAt) - new Date(b.createdAt);
    });
  }

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <header className="max-w-6xl mx-auto mb-6">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl md:text-3xl font-bold">Task Manager</h1>
          <div className="flex gap-2 items-center">
            <input
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="Search title or description"
              className="px-3 py-2 rounded border shadow-sm text-sm"
            />
            <input
              value={filterTag}
              onChange={(e) => setFilterTag(e.target.value)}
              placeholder="Filter by tag"
              className="px-3 py-2 rounded border shadow-sm text-sm"
            />
            <button onClick={exportJSON} className="px-3 py-2 rounded bg-blue-600 text-white text-sm">Export JSON</button>
            <button onClick={() => localStorage.clear()} className="px-3 py-2 rounded bg-red-500 text-white text-sm">Clear Storage</button>
          </div>
        </div>
        <p className="text-xs text-gray-600 mt-2">Drag tasks between columns. Click a column's + to add a new task.</p>
      </header>

      <main className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-4">
        {COLUMNS.map((col) => (
          <section
            key={col.id}
            onDragOver={onDragOver}
            onDrop={(e) => onDrop(e, col.id)}
            className="bg-white rounded shadow p-4 flex flex-col"
          >
            <div className="flex items-center justify-between mb-3">
              <h2 className="font-semibold">{col.title}</h2>
              <div className="flex items-center gap-2">
                <span className="text-xs text-gray-500">{tasksByColumn(col.id).length}</span>
                <button onClick={() => openEditor(col.id)} className="px-2 py-1 text-sm rounded bg-green-600 text-white">+</button>
              </div>
            </div>

            <div className="space-y-3 overflow-auto" style={{ maxHeight: "60vh" }}>
              {tasksByColumn(col.id).map((t) => (
                <article
                  key={t.id}
                  draggable
                  onDragStart={(e) => onDragStart(e, t.id)}
                  className="border rounded p-3 bg-gray-50 hover:shadow cursor-move"
                >
                  <div className="flex items-start justify-between gap-2">
                    <div>
                      <h3 className="font-medium">{t.title}</h3>
                      <p className="text-sm text-gray-600 truncate max-w-[18rem]">{t.description}</p>
                      <div className="flex flex-wrap gap-2 mt-2">
                        {t.tags.map((tag, i) => (
                          <span key={i} className="text-xs px-2 py-1 rounded bg-indigo-100">#{tag}</span>
                        ))}
                      </div>
                    </div>

                    <div className="text-right flex flex-col items-end gap-2">
                      <div className="text-xs text-gray-500">{t.deadline ? new Date(t.deadline).toLocaleDateString() : "—"}</div>
                      <div className="flex gap-1">
                        <button onClick={() => openEditor(t.column, t.id)} className="text-xs px-2 py-1 rounded bg-yellow-400">Edit</button>
                        <button onClick={() => removeTask(t.id)} className="text-xs px-2 py-1 rounded bg-red-400">Del</button>
                      </div>
                    </div>
                  </div>
                </article>
              ))}
            </div>
          </section>
        ))}
      </main>

      {/* Editor Modal */}
      {editing && (
        <EditorModal
          key={editing.id || "new"}
          initialTask={editing.id ? tasks[editing.id] : null}
          columnId={editing.column}
          onClose={closeEditor}
          onSave={(data) => {
            if (editing.id) updateTask(editing.id, data);
            else addTask(editing.column, data);
            closeEditor();
          }}
        />
      )}

      <footer className="max-w-6xl mx-auto mt-6 text-xs text-gray-500">Built with ❤️ — single-file demo. Persisted to localStorage.</footer>
    </div>
  );
}

function EditorModal({ initialTask = null, columnId, onClose, onSave }) {
  const [title, setTitle] = useState(initialTask?.title || "");
  const [description, setDescription] = useState(initialTask?.description || "");
  const [deadline, setDeadline] = useState(initialTask?.deadline ? initialTask.deadline.slice(0, 10) : "");
  const [tagInput, setTagInput] = useState("");
  const [tags, setTags] = useState(initialTask?.tags || []);

  function pushTag() {
    const t = tagInput.trim();
    if (!t) return;
    if (!tags.includes(t)) setTags((s) => [...s, t]);
    setTagInput("");
  }

  function removeTag(t) {
    setTags((s) => s.filter((x) => x !== t));
  }

  return (
    <div className="fixed inset-0 flex items-center justify-center z-40">
      <div className="absolute inset-0 bg-black/40" onClick={onClose}></div>
      <div className="relative bg-white rounded shadow-lg max-w-xl w-full p-6 z-50">
        <h3 className="text-lg font-semibold mb-3">{initialTask ? "Edit Task" : `Add task to ${columnId}`}</h3>
        <div className="space-y-3">
          <input className="w-full p-2 border rounded" placeholder="Title" value={title} onChange={(e) => setTitle(e.target.value)} />
          <textarea className="w-full p-2 border rounded" placeholder="Description" value={description} onChange={(e) => setDescription(e.target.value)} />
          <div className="flex gap-2">
            <input type="date" className="p-2 border rounded" value={deadline} onChange={(e) => setDeadline(e.target.value)} />
            <div className="flex gap-2 items-center">
              <input className="p-2 border rounded" placeholder="Add tag (e.g. urgent)" value={tagInput} onChange={(e) => setTagInput(e.target.value)} onKeyDown={(e) => e.key === "Enter" && (e.preventDefault(), pushTag())} />
              <button onClick={pushTag} className="px-3 py-1 rounded bg-indigo-600 text-white">Add</button>
            </div>
          </div>

          <div className="flex flex-wrap gap-2">
            {tags.map((t) => (
              <button key={t} onClick={() => removeTag(t)} className="px-2 py-1 text-xs bg-indigo-100 rounded">{t} ×</button>
            ))}
          </div>
        </div>

        <div className="mt-4 flex justify-end gap-2">
          <button onClick={onClose} className="px-4 py-2 rounded border">Cancel</button>
          <button
            onClick={() => onSave({ title, description, deadline: deadline || null, tags })}
            className="px-4 py-2 rounded bg-green-600 text-white"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
}
